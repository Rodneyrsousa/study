================================================================
######## Downloading with progress bar and renaming the final file
wget -O ~/Desktop/final.zip https://github.com/joaov777/mainconf/archive/master.zip -q --show-progress --progress=bar:force 2>&1
================================================================
######## Create and delete folder based on condition and timing
#folder=~/Desktop/teste
	
	read -t 15 -r -p "Type the folder absolute path: " folder && {

		[[ ! -d $folder ]] && {
			echo -e "Folder non existent! \nCreating folder!" && sleep 1
			mkdir $folder
		} || {
			echo -e "Folder already created! \n Deleting it!" && sleep 1
			sudo rm -rf $folder
		}
	} || {
	echo "Time is up!!"
	}
================================================================
######## Check distro installed
test $(lsb_release -a | grep Manjaro | wc -l) != 0 && echo 'É a distro escolhida!!' || echo 'Não é a distro escolhida!!'
================================================================
######## Check directory existence and/or create it
[ ! -d "$1" ] && mkdir $1 || echo "Folder alread created!"
================================================================
######## Insert text after matching pattern
sed -i "/^PATTERNTOBEFOUND/a REPLACEMENT" ~/Desktop/example.txt
================================================================
######## Removing text after matching pattern
sed -i "s/^PATTERNTOBEFOUND//g" ~/Desktop/example.txt
================================================================
######## Checking whether system is booted through UEFI or BIOS
bootype=""

	[[ $(ls /sys/firmware/efi/efivars 2>1) ]] && {
		echo "UEFI boot detected!!"
		bootype="UEFI"
	} || {
		echo "BIOS boot detected!!"
		bootype="BIOS"
	}
	
	[[ $bootype = "UEFI" ]] && echo "Nossa, UEFI!!" || echo "Nossa, BIOS!!"
================================================================
######## Checking whether system is booted through UEFI or BIOS [2]

checkbootype(){

	if [[ -d /sys/firmware/efi/efivars ]] 2>/dev/null
	then
		echo "UEFI"
	else
		echo "BIOS"
	fi	
}
	echo "A função de checagem do boot encontrou $(checkbootype)"
================================================================
######## Checking the current desktop environment (DE)
de=$XDG_CURRENT_DESKTOP

    if [ $XDG_CURRENT_DESKTOP == "XFCE" ] 
    then
        echo "XFCE"
    elif  [ $XDG_CURRENT_DESKTOP == "i3" ]
    then
        echo "i3"
    else
        echo "Nao sei!"
    fi
    
 ===============================================================
######## Adding and removing panel on XFCE. If enabled, gets disabled and vice-versa.

        #[[ $(pgrep $1 | wc -l) -gt 0 ]] && echo "Panel Enabled" || echo "Panel Disabled"
        if [ $(pgrep xfce4-panel | wc -l) -gt 0 ]; then
            exec pkill xfce4-panel
        else 
            exec nohup xfce4-panel 2>/dev/null & 
            [[ -f $PWD/nohup.out ]] && rm $PWD/nohup.out 
        fi
 ===============================================================
######## Reordering a set of elements of an array (bubble sort)

read -p "Insert elements: " -a arr 
  
echo "Array in original order"
echo ${arr[*]} 
  
# Performing Bubble sort  
for ((i = 0; i<"${#arr[*]}"; i++)) 
do
    for((j = 0; j<"${#arr[*]}"-i-1; j++)) 
    do
        if [ ${arr[j]} -gt ${arr[$((j+1))]} ] 
        then
            # swap 
            temp=${arr[j]} 
            arr[$j]=${arr[$((j+1))]}   
            arr[$((j+1))]=$temp 
        fi
    done
done
  
echo "Array in sorted order :"
echo ${arr[*]} 

echo -e "Only position 1 through 3:\n${arr[@]:1:3}"
echo -e "Final number of elements:\n${#arr[*]}"

# While loop to print ordered elements as in a menu enclosed by brackets
i=0
while [ $i -lt ${#arr[*]} ]
do
    echo "[${arr[$i]}]"
    ((i=$i+1))
    #i=`expr $i + 1` 
done

 ===============================================================
######## Command substitution with arrays

categories=( `ls ~` $(whoami) )

# Printing first position
echo ${categories[0]}

# Printing all positions
echo ${categories[*]}
echo ${categories[@]}
































